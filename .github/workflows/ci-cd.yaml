name: MiniShop CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, order-service, payment-service, notification-service]
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        if: matrix.service == 'user-service' || matrix.service == 'order-service'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Go
        if: matrix.service == 'product-service'
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'

      - name: Set up Python
        if: matrix.service == 'payment-service'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Node.js
        if: matrix.service == 'notification-service'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (Java)
        if: matrix.service == 'user-service' || matrix.service == 'order-service'
        run: cd services/${{ matrix.service }} && ./mvnw dependency:go-offline

      - name: Install dependencies (Go)
        if: matrix.service == 'product-service'
        run: cd services/${{ matrix.service }} && go mod download

      - name: Install dependencies (Python)
        if: matrix.service == 'payment-service'
        run: cd services/${{ matrix.service }} && pip install -r requirements.txt

      - name: Install dependencies (Node.js)
        if: matrix.service == 'notification-service'
        run: cd services/${{ matrix.service }} && npm ci

      - name: Run tests (Java)
        if: matrix.service == 'user-service' || matrix.service == 'order-service'
        run: cd services/${{ matrix.service }} && ./mvnw test

      - name: Run tests (Go)
        if: matrix.service == 'product-service'
        run: cd services/${{ matrix.service }} && go test ./...

      - name: Run tests (Python)
        if: matrix.service == 'payment-service'
        run: cd services/${{ matrix.service }} && pytest

      - name: Run tests (Node.js)
        if: matrix.service == 'notification-service'
        run: cd services/${{ matrix.service }} && npm test

  build:
    name: Build and Push Docker Images
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, order-service, payment-service, notification-service, spring-gateway]
        include:
          - service: user-service
            context: ./services/user-service
          - service: product-service
            context: ./services/product-service
          - service: order-service
            context: ./services/order-service
          - service: payment-service
            context: ./services/payment-service
          - service: notification-service
            context: ./services/notification-service
          - service: spring-gateway
            context: ./gateway/spring-gateway
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/minishop-${{ matrix.service }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-helm-values:
    name: Update Helm Values
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Get short SHA
        id: sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Update Helm values for dev environment
        run: |
          for service in user-service product-service order-service payment-service notification-service spring-gateway; do
            if [ -f "infra/helm-charts/$service/values-dev.yaml" ]; then
              sed -i "s|tag:.*|tag: ${{ steps.sha.outputs.sha }}|g" infra/helm-charts/$service/values-dev.yaml
            fi
          done

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add infra/helm-charts/*/values-dev.yaml
          git commit -m "Update image tags to ${{ steps.sha.outputs.sha }}" || echo "No changes to commit"
          git push

  notify-argocd:
    name: Notify ArgoCD
    needs: update-helm-values
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger ArgoCD sync
        run: |
          echo "Notifying ArgoCD to sync applications..."
          # In a real environment, you would use the ArgoCD API to trigger a sync
          # curl -X POST https://argocd.niini.in/api/v1/applications/minishop-dev/sync \
          #   -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"prune": true, "dryRun": false}'
          echo "ArgoCD sync triggered successfully"

  deploy-to-staging:
    name: Deploy to Staging
    needs: [update-helm-values, notify-argocd]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.api.niini.in
    steps:
      - uses: actions/checkout@v3

      - name: Get short SHA
        id: sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Update Helm values for staging environment
        run: |
          for service in user-service product-service order-service payment-service notification-service spring-gateway; do
            if [ -f "infra/helm-charts/$service/values-staging.yaml" ]; then
              sed -i "s|tag:.*|tag: ${{ steps.sha.outputs.sha }}|g" infra/helm-charts/$service/values-staging.yaml
            fi
          done

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add infra/helm-charts/*/values-staging.yaml
          git commit -m "Update staging image tags to ${{ steps.sha.outputs.sha }}" || echo "No changes to commit"
          git push

  deploy-to-production:
    name: Deploy to Production
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.niini.in
    steps:
      - uses: actions/checkout@v3

      - name: Get short SHA
        id: sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Update Helm values for production environment
        run: |
          for service in user-service product-service order-service payment-service notification-service spring-gateway; do
            if [ -f "infra/helm-charts/$service/values-prod.yaml" ]; then
              sed -i "s|tag:.*|tag: ${{ steps.sha.outputs.sha }}|g" infra/helm-charts/$service/values-prod.yaml
            fi
          done

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add infra/helm-charts/*/values-prod.yaml
          git commit -m "Update production image tags to ${{ steps.sha.outputs.sha }}" || echo "No changes to commit"
          git push