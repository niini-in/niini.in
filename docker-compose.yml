version: '3.8'

services:
  # API Gateway
  spring-gateway:
    build: ./gateway/spring-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
    depends_on:
      - service-registry
    networks:
      - minishop-network

  # Service Registry
  service-registry:
    image: steeltoeoss/eureka-server:latest
    ports:
      - "8761:8761"
    networks:
      - minishop-network

  # User Service
  user-service:
    build: ./services/user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
    depends_on:
      - postgres
      - service-registry
    networks:
      - minishop-network

  # Product Service
  product-service:
    build: ./services/product-service
    ports:
      - "8082:8082"
    environment:
      - APP_ENV=dev
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=productdb
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - SERVICE_REGISTRY_URL=http://service-registry:8761/eureka/
    depends_on:
      - postgres
      - service-registry
    networks:
      - minishop-network

  # Order Service
  order-service:
    build: ./services/order-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/orderdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - service-registry
      - kafka
    networks:
      - minishop-network

  # Payment Service
  payment-service:
    build: ./services/payment-service
    ports:
      - "8084:8084"
    environment:
      - APP_ENV=dev
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=paymentdb
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - SERVICE_REGISTRY_URL=http://service-registry:8761/eureka/
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - service-registry
      - kafka
    networks:
      - minishop-network

  # Notification Service
  notification-service:
    build: ./services/notification-service
    ports:
      - "8085:8085"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=minishop_notifications
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - service-registry
      - kafka
    networks:
      - minishop-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=userdb,productdb,orderdb,paymentdb,minishop_notifications
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - minishop-network

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - minishop-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - minishop-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - minishop-network

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:v2.42.0
    ports:
      - "9090:9090"
    volumes:
      - ./infra/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - minishop-network

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:9.4.7
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - minishop-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.42
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - minishop-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  minishop-network:
    driver: bridge